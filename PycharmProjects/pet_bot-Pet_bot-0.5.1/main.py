import math

import telebot
from telebot import types
import datetime

from db import database

bot = telebot.TeleBot('6767523338:AAHCT-k6OvYwOBGzikc71QgfW75A9XxOEYM')

result_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞!\n" \
              "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ pet-–ø—Ä–æ–µ–∫—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

position = 1


def main_menu():
    global flag, suggest_position, suggest_id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    language = types.KeyboardButton(text='–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')
    number = types.InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    markup.add(language, number)
    format = types.InlineKeyboardButton(text='–§–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞')
    time = types.InlineKeyboardButton(text='–°—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
    markup.add(format, time)
    list_all = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ pet-–ø—Ä–æ–µ–∫—Ç—ã')
    suggest_idea = types.InlineKeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
    markup.add(list_all, suggest_idea)
    admin_enter = types.InlineKeyboardButton(text='–í–æ–π—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
    markup.add(admin_enter)
    flag = 0
    suggest_position = 0
    suggest_id = 0
    suggest_list.clear()
    return markup


def language_func():
    language = types.ReplyKeyboardMarkup(resize_keyboard=True)
    py = types.KeyboardButton(text='—è–∑—ã–∫: Python')
    java = types.KeyboardButton(text='—è–∑—ã–∫: Java')
    language.add(py, java)
    csh = types.KeyboardButton(text='—è–∑—ã–∫: C#')
    cpl = types.KeyboardButton(text='—è–∑—ã–∫: C++')
    language.add(csh, cpl)
    jsc = types.KeyboardButton(text='—è–∑—ã–∫: JavaScript')
    kotlin = types.KeyboardButton(text='—è–∑—ã–∫: Kotlin')
    language.add(jsc, kotlin)
    back = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    language.add(back)
    return language


def number_func():
    number = types.ReplyKeyboardMarkup()
    one = types.KeyboardButton(text='1 —á–µ–ª–æ–≤–µ–∫')
    two = types.KeyboardButton(text='2 —á–µ–ª–æ–≤–µ–∫–∞')
    number.row(one, two)
    five = types.KeyboardButton(text='3-8 —á–µ–ª–æ–≤–µ–∫')
    nine = types.KeyboardButton(text='–±–æ–ª–µ–µ 8 —á–µ–ª–æ–≤–µ–∫')
    number.row(five, nine)
    back = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    number.row(back)
    return number


def format_func():
    format = types.ReplyKeyboardMarkup()
    backend = types.KeyboardButton(text='–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    frontend = types.KeyboardButton(text='–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    format.row(backend, frontend)
    mobile = types.KeyboardButton(text='–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Mobile-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    backfront = types.KeyboardButton(text='–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Front+Back-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    format.row(mobile, backfront)
    back = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    format.row(back)
    return format


def format_day(num):
    if num == 1:
        return f"{num} –¥–µ–Ω—å"
    elif num in (2, 3, 4):
        return f"{num} –¥–Ω—è"
    else:
        return f"{num} –¥–Ω–µ–π"


def time_func():
    time = types.ReplyKeyboardMarkup()
    week = types.KeyboardButton(text='—Å—Ä–æ–∫: –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏')
    mouth = types.KeyboardButton(text='—Å—Ä–æ–∫: –æ—Ç –Ω–µ–¥–µ–ª–∏ –¥–æ –º–µ—Å—è—Ü–∞')
    time.row(week, mouth)
    six_mouth = types.KeyboardButton(text='—Å—Ä–æ–∫: –æ—Ç –º–µ—Å—è—Ü–∞ –¥–æ –ø–æ–ª—É–≥–æ–¥–∞')
    twelve_mouth = types.KeyboardButton(text='—Å—Ä–æ–∫: –±–æ–ª–µ–µ –ø–æ–ª—É–≥–æ–¥–∞')
    time.row(six_mouth, twelve_mouth)
    back = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    time.row(back)
    return time


def confirmation():
    conf = types.InlineKeyboardMarkup()
    confT = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data='confirmation_true' + str(data[0]))
    conf.row(confT)
    confF = types.InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='confirmation_false' + str(data[0]))
    conf.row(confF)
    return conf


def database_language(message):
    db = database.BotDataBase('db/database.db')
    answer = db.search_by_language(message)
    return answer


def database_number(message):
    db = database.BotDataBase('db/database.db')
    answer = db.search_by_people(message)
    return answer


def database_format(message):
    db = database.BotDataBase('db/database.db')
    answer = db.search_by_format(message[13:])
    return answer


def database_time(message):
    db = database.BotDataBase('db/database.db')
    answer = db.search_by_time(message)
    return answer


def database_all():
    db = database.BotDataBase('db/database.db')
    answer = db.get_all()
    return answer


def murkup_all():
    list = database_all()
    db = types.InlineKeyboardMarkup()
    for i in range((position - 1) * 5, position * 5):
        if i < len(list):
            project = types.InlineKeyboardButton(text=list[i][1], callback_data='project_' + str(list[i][0]))
            db.row(project)
    left = types.InlineKeyboardButton(text='<', callback_data='left_message')
    pos = types.InlineKeyboardButton(text=str(position) + '/' + str(math.ceil(len(list) / 5)),
                                     callback_data='pos_message')
    right = types.InlineKeyboardButton(text='>', callback_data='right_message')
    db.row(left, pos, right)
    back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
    db.row(back)
    return db


def back_suggest():
    db = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
    db.row(back)
    return db


def get_time():
    all_time = str(datetime.datetime.now())
    years = all_time[0:4]
    month = all_time[5:7]
    day = all_time[8:10]
    time = all_time[10:19]
    return "–í—Å–µ pet-–ø—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ" + time + " " + day + "." + month + "." + years


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.last_name is not None:
        first_mess = f"{message.from_user.first_name} {message.from_user.last_name}, –∑–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,\n" \
                 f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                 f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
    else:
        first_mess = f"{message.from_user.first_name}, –∑–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,\n" \
                     f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                     f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
    bot.send_message(message.chat.id, first_mess, reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: True)
def call_query(call):
    global position
    db = database.BotDataBase('db/database.db')
    if call.message:
        if call.data[0:7] == 'project':
            info_db = database.BotDataBase('db/database.db')
            data = info_db.get_by_id(int(call.data.split('_')[1]))
            print(data)
            string = "üîò<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</u></b> " + str(data[0]) + "\n" + \
                     "üîò<b><u>–†–µ–π—Ç–∏–Ω–≥:</u></b> " + str(data[1]) + "\n" + \
                     "üîò<b><u>–û–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + str(data[2]) + "\n" + \
                     "üîò<b><u>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</u></b> " + str(data[3]) + "\n" + \
                     "üîò<b><u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</u></b> " + str(data[4]) + "\n" + \
                     "üîò<b><u>–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</u></b> " + str(data[5]) + "\n" + \
                     "üîò<b><u>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</u></b> " + str(data[6]) + "\n" + \
                     "üîò<b><u>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</u></b> " + str(data[7]) + "\n" + \
                     "üîò<b><u>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</u></b> " + str(data[8]) + "\n"
            db = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
            db.row(back)
            bot.send_message(call.message.chat.id, string, reply_markup=db, parse_mode="html")
        if call.data == 'right_message':
            if db.ideas_amount() > position * 5:
                position = position + 1
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, get_time(), reply_markup=murkup_all())
        if call.data == 'left_message':
            if position > 1:
                position = position - 1
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, get_time(), reply_markup=murkup_all())
        if call.data == 'confirmation_true':
            #for i in range(0, 9):
                #print(suggest_list[i])
            db.add_suggestion(suggest_list[0], 0, suggest_list[2], suggest_list[1], suggest_list[5], suggest_list[3],
                              suggest_list[4], suggest_list[6], suggest_list[8], suggest_list[7])
            bot.send_message(call.message.chat.id, "–ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
                             reply_markup=back_suggest())
        if call.data == 'confirmation_false':
            global flag, suggest_position
            flag = 1
            suggest_position = 0
            suggest_list.clear()
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏")
        if call.data == 'yes_suggest_message':
            bot.send_message(call.message.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ –∏–¥–µ—é –ø–æ 100-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ")
        if call.data == 'no_suggest_message':
            global suggest_id
            db.reject_suggestion(suggest_id)
            #print(suggest_id)
            db = types.InlineKeyboardMarkup()
            resume = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–¥–µ–∏',
                                                callback_data='resume_message')
            db.row(resume)
            back = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='back_message')
            db.row(back)
            bot.send_message(call.message.chat.id, "–ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞", reply_markup=db)
        if call.data == 'resume_message':
            db = database.BotDataBase('db/database.db')
            admin_list = db.get_suggestion()
            #print(admin_list)
            try:
                string = "üîò<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</u></b> " + str(admin_list[1]) + "\n" + \
                         "üîò<b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + str(admin_list[2]) + "\n" + \
                         "üîò<b><u>–û–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + str(admin_list[3]) + "\n" + \
                         "üîò<b><u>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</u></b> " + str(admin_list[5]) + "\n" + \
                         "üîò<b><u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</u></b> " + str(admin_list[7]) + "\n" + \
                         "üîò<b><u>–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</u></b> " + str(admin_list[8]) + "\n" + \
                         "üîò<b><u>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</u></b> " + str(admin_list[6]) + "\n" + \
                         "üîò<b><u>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</u></b> " + str(admin_list[9]) + "\n" + \
                         "üîò<b><u>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</u></b> " + str(admin_list[10]) + "\n"
                suggest_id = admin_list[0]
                db = types.InlineKeyboardMarkup()
                yes = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='yes_suggest_message')
                no = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='no_suggest_message')
                db.row(no, yes)
                back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
                db.row(back)
                bot.send_message(call.message.chat.id, string, reply_markup=db, parse_mode="html")
            except:
                db = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
                db.row(back)
                bot.send_message(call.message.chat.id, "–ë–æ–ª—å—à–µ –∏–¥–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É",
                                 reply_markup=db)
        if call.data == 'back_message':
            if call.message.from_user.last_name is not None:
                first_mess = f"{call.message.from_user.first_name} {call.message.from_user.last_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                             f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                             f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
            else:
                first_mess = f"{call.message.from_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                             f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                             f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
            position = 1
            bot.send_message(call.message.chat.id, first_mess, reply_markup=main_menu())


flag = 0
suggest_position = 0
suggest_list = []
suggest_id = 0


@bot.message_handler(content_types=['text'])
def marshrutisator(message):
    if flag == 0:
        call_message(message)
    elif flag == 1:
        suggest_message(message)
    else:
        admin(message)


def call_message(message):
    if message.text == '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è':
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=language_func())
    elif message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=number_func())
    elif message.text == '–§–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞':
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", reply_markup=format_func())
    elif message.text == '–°—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞':
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º —Å—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=time_func())
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ pet-–ø—Ä–æ–µ–∫—Ç—ã':
        bot.send_message(message.chat.id, text=get_time(), parse_mode='Markdown', reply_markup=murkup_all())
    elif str(message.text)[0:4] == '—è–∑—ã–∫':
        # bot.send_message(message.chat.id, result_text + "\n" + database_language(message.text), parse_mode= 'Markdown', reply_markup=db_language_func())
        bot.send_message(message.chat.id, result_text)
        list = database_language(message.text)
        for data in list:
            db = types.InlineKeyboardMarkup()
            project = types.InlineKeyboardButton(text=data[1], callback_data='project_' + str(data[0]))
            db.row(project)
            bot.send_message(message.chat.id, data[1] + "\n" + data[2], parse_mode='Markdown', reply_markup=db)
        if not list:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ pet-–ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏c–∫–∞.")
        db_language = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
        db_language.row(back)
        bot.send_message(message.chat.id, text="–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=db_language)
    elif (str(message.text)[len(str(message.text)) - 7:len(str(message.text))] == '—á–µ–ª–æ–≤–µ–∫') | (
            str(message.text)[len(str(message.text)) - 8:len(str(message.text))] == '—á–µ–ª–æ–≤–µ–∫–∞'):
        bot.send_message(message.chat.id, result_text)
        list = database_number(message.text)
        for data in list:
            db = types.InlineKeyboardMarkup()
            project = types.InlineKeyboardButton(text=data[1], callback_data='project_' + str(data[0]))
            db.row(project)
            bot.send_message(message.chat.id, data[1] + "\n" + data[2], parse_mode='Markdown', reply_markup=db)
        if not list:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ pet-–ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–∏–∫–∞.")
        db_number = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
        db_number.row(back)
        bot.send_message(message.chat.id, text="–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=db_number)
    elif str(message.text)[0:11] == '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
        bot.send_message(message.chat.id, result_text)
        list = database_format(message.text)
        #print(list)
        for data in list:
            db = types.InlineKeyboardMarkup()
            project = types.InlineKeyboardButton(text=data[1], callback_data='project_' + str(data[0]))
            db.row(project)
            bot.send_message(message.chat.id, data[1] + "\n" + data[2], parse_mode='Markdown', reply_markup=db)
        if not list:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ pet-–ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–∏–∫–∞.")
        db_format = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
        db_format.row(back)
        bot.send_message(message.chat.id, text="–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=db_format)
    elif str(message.text)[0:4] == '—Å—Ä–æ–∫':
        #print(message.text)
        bot.send_message(message.chat.id, result_text)
        list = database_time(message.text)
        for data in list:
            db = types.InlineKeyboardMarkup()
            project = types.InlineKeyboardButton(text=data[1], callback_data='project_' + str(data[0]))
            db.row(project)
            bot.send_message(message.chat.id, data[1] + "\n" + data[2], parse_mode='Markdown', reply_markup=db)
        if not list:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ pet-–ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–∏–∫–∞.")
        db_time = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
        db_time.row(back)
        bot.send_message(message.chat.id, text="–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=db_time)
    elif message.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏")
        global flag
        flag = 1
    elif message.text == '–í–æ–π—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        flag = 2
    elif message.text == '–ù–∞–∑–∞–¥':
        if message.from_user.last_name is not None:
            first_mess = f"{message.from_user.first_name} {message.from_user.last_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                     f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                     f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
        else:
            first_mess = f"{message.from_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                         f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                         f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
        bot.send_message(message.chat.id, first_mess, reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


def admin(message):
    db = database.BotDataBase('db/database.db')
    global suggest_id
    try:
        if (db.is_admin(int(str(message.text)))) & (suggest_id == 0):
            #print("—Å–≤–æ–π")
            bot.send_message(message.chat.id, "–≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            admin_list = db.get_suggestion()
            #print(admin_list)
            try:
                string = "üîò<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</u></b> " + str(admin_list[1]) + "\n" + \
                     "üîò<b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + str(admin_list[4]) + "\n" + \
                     "üîò<b><u>–û–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + str(admin_list[3]) + "\n" + \
                     "üîò<b><u>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</u></b> " + str(db.get_theme(admin_list[5])) + "\n" + \
                     "üîò<b><u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</u></b> " + str(db.get_people(admin_list[7])) + "\n" + \
                     "üîò<b><u>–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</u></b> " + str(db.get_time(admin_list[8])) + "\n" + \
                     "üîò<b><u>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</u></b> " + str(db.get_language(admin_list[6])) + "\n" + \
                     "üîò<b><u>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</u></b> " + str(db.get_level(admin_list[9])) + "\n" + \
                     "üîò<b><u>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</u></b> " + str(admin_list[10])
                suggest_id = admin_list[0]
                db = types.InlineKeyboardMarkup()
                yes = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='yes_suggest_message')
                no = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='no_suggest_message')
                db.row(no, yes)
                back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
                db.row(back)
                bot.send_message(message.chat.id, string, reply_markup=db, parse_mode="html")
            except:
                db = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_message')
                db.row(back)
                bot.send_message(message.chat.id, "–ë–æ–ª—å—à–µ –∏–¥–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É", reply_markup=db)
        else:
            if suggest_id == 0:
                #print("–ø–æ—à—ë–ª –Ω–∞—Ñ–∏–≥")
                bot.send_message(message.chat.id, "–ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω", reply_markup=back_suggest())
            else:
                #print(message.text)
                db.approve_suggestion(suggest_id, int(message.text))
                bd = types.InlineKeyboardMarkup()
                resume = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–¥–µ–∏',
                                                callback_data='resume_message')
                bd.row(resume)
                back = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='back_message')
                bd.row(back)
                bot.send_message(message.chat.id, "–ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!", reply_markup=bd)
    except:
        if suggest_id == 0:
            #print("–ø–æ—à—ë–ª –Ω–∞—Ñ–∏–≥")
            bot.send_message(message.chat.id, "–ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω", reply_markup=back_suggest())
        else:
            bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞")


def suggest_message(message):
    global suggest_position
    if message.text == '–ù–∞–∑–∞–¥':
        if message.from_user.last_name is not None:
            first_mess = f"{message.from_user.first_name} {message.from_user.last_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                     f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                     f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
        else:
            first_mess = f"{message.from_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n" \
                         f"–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∏–¥–µ–∏ pet-–ø—Ä–æ–µ–∫—Ç–æ–≤. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã —Ç–æ—á–Ω–æ –Ω–µ —É–π–¥—ë—Ç–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏\n" \
                         f"–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
        bot.send_message(message.chat.id, first_mess, reply_markup=main_menu())
    elif suggest_position == 0:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        suggest_position = suggest_position + 1
    elif suggest_position == 1:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        suggest_position = suggest_position + 1
    elif suggest_position == 2:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–∞–º–∏)",
                         reply_markup=language_func())
        suggest_position = suggest_position + 1
    elif suggest_position == 3:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–∞–º–∏)",
                         reply_markup=number_func())
        suggest_position = suggest_position + 1
    elif suggest_position == 4:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–∞–º–∏)",
                         reply_markup=format_func())
        suggest_position = suggest_position + 1
    elif suggest_position == 5:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–∞–º–∏)",
                         reply_markup=time_func())
        suggest_position = suggest_position + 1
    elif suggest_position == 6:
        suggest_list.append(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        suggest_position = suggest_position + 1
    elif suggest_position == 7:
        suggest_list.append(message.text)
        level = types.ReplyKeyboardMarkup(resize_keyboard=True)
        l1 = types.KeyboardButton(text='–Ω–∞—á–∏–Ω–∞—é—â–∏–π')
        l2 = types.KeyboardButton(text='—Å—Ä–µ–¥–Ω–∏–π')
        level.add(l1, l2)
        l3 = types.KeyboardButton(text='–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π')
        back = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
        level.add(l3, back)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–∞–º–∏)", reply_markup=level)
        suggest_position = suggest_position + 1
    elif suggest_position == 8:
        suggest_list.append(message.text)
        conf = types.InlineKeyboardMarkup()
        confT = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data='confirmation_true')
        conf.row(confT)
        confF = types.InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='confirmation_false')
        conf.row(confF)
        confBack = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_message')
        conf.row(confBack)
        bot.send_message(message.chat.id,
                         "<b><u>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</u></b>\n" +
                         "üîò<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏:</u></b> " + suggest_list[0] + "\n" +
                         "üîò<b><u>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + suggest_list[1] + "\n" +
                         "üîò<b><u>–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</u></b> " + suggest_list[2] + "\n" +
                         "üîò<b><u>" + suggest_list[3] + "</u></b>" + "\n" +
                         "üîò<b><u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</u></b> " + suggest_list[4] + "\n" +
                         "üîò<b><u>" + suggest_list[5] + "</u></b>" + "\n" +
                         "üîò<b><u>" + suggest_list[6] + "</u></b>" + "\n" +
                         "üîò<b><u>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</u></b> " + suggest_list[7] + "\n" +
                         "üîò<b><u>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</u></b> " + suggest_list[8], reply_markup=conf, parse_mode="html")
        suggest_position = suggest_position + 1


# bot.delete_message(message.chat.id, message.message_id)
# bot.answer_callback_query(callback_query_id=message.id, show_alert=False)


bot.polling()
